!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
MAX_BUF_LEN	load.c	1001;"	d	file:
MAX_INTEGER_STR_LENGTH	dump.c	19;"	d	file:
MAX_REAL_STR_LENGTH	dump.c	20;"	d	file:
STRBUFFER_FACTOR	strbuffer.c	15;"	d	file:
STRBUFFER_MIN_SIZE	strbuffer.c	14;"	d	file:
STRBUFFER_SIZE_MAX	strbuffer.c	16;"	d	file:
STREAM_STATE_EOF	load.c	22;"	d	file:
STREAM_STATE_ERROR	load.c	23;"	d	file:
STREAM_STATE_OK	load.c	21;"	d	file:
TOKEN_EOF	load.c	26;"	d	file:
TOKEN_FALSE	load.c	31;"	d	file:
TOKEN_INTEGER	load.c	28;"	d	file:
TOKEN_INVALID	load.c	25;"	d	file:
TOKEN_NULL	load.c	32;"	d	file:
TOKEN_REAL	load.c	29;"	d	file:
TOKEN_STRING	load.c	27;"	d	file:
TOKEN_TRUE	load.c	30;"	d	file:
_GNU_SOURCE	dump.c	8;"	d	file:
_GNU_SOURCE	load.c	8;"	d	file:
_GNU_SOURCE	strbuffer.c	8;"	d	file:
_GNU_SOURCE	value.c	8;"	d	file:
arg	load.c	/^    void *arg;$/;"	m	struct:__anon6	file:
array_copy	value.c	/^static void array_copy(json_t **dest, size_t dpos,$/;"	f	file:
array_move	value.c	/^static void array_move(json_array_t *array, size_t dest,$/;"	f	file:
bucket_is_empty	hashtable.c	/^static JSON_INLINE int bucket_is_empty(hashtable_t *hashtable, bucket_t *bucket)$/;"	f	file:
bucket_t	hashtable.c	/^typedef struct hashtable_bucket bucket_t;$/;"	t	typeref:struct:hashtable_bucket	file:
buffer	load.c	/^    char buffer[5];$/;"	m	struct:__anon1	file:
buffer_data_t	load.c	/^} buffer_data_t;$/;"	t	typeref:struct:__anon5	file:
buffer_get	load.c	/^static int buffer_get(void *data)$/;"	f	file:
buffer_pos	load.c	/^    size_t buffer_pos;$/;"	m	struct:__anon1	file:
callback	load.c	/^    json_load_callback_t callback;$/;"	m	struct:__anon6	file:
callback_data_t	load.c	/^} callback_data_t;$/;"	t	typeref:struct:__anon6	file:
callback_get	load.c	/^static int callback_get(void *data)$/;"	f	file:
column	load.c	/^    int column, last_column;$/;"	m	struct:__anon1	file:
column	pack_unpack.c	/^    int column;$/;"	m	struct:__anon7	file:
data	load.c	/^    char data[MAX_BUF_LEN];$/;"	m	struct:__anon6	file:
data	load.c	/^    const char *data;$/;"	m	struct:__anon4	file:
data	load.c	/^    const char *data;$/;"	m	struct:__anon5	file:
data	load.c	/^    void *data;$/;"	m	struct:__anon1	file:
decode_unicode_escape	load.c	/^static int32_t decode_unicode_escape(const char *str)$/;"	f	file:
do_dump	dump.c	/^static int do_dump(const json_t *json, size_t flags, int depth,$/;"	f	file:
do_free	memory.c	/^static json_free_t do_free = free;$/;"	v	file:
do_malloc	memory.c	/^static json_malloc_t do_malloc = malloc;$/;"	v	file:
dump_indent	dump.c	/^static int dump_indent(size_t flags, int depth, int space, json_dump_callback_t dump, void *data)$/;"	f	file:
dump_string	dump.c	/^static int dump_string(const char *str, json_dump_callback_t dump, void *data, size_t flags)$/;"	f	file:
dump_to_file	dump.c	/^static int dump_to_file(const char *buffer, size_t size, void *data)$/;"	f	file:
dump_to_strbuffer	dump.c	/^static int dump_to_strbuffer(const char *buffer, size_t size, void *data)$/;"	f	file:
error	pack_unpack.c	/^    json_error_t *error;$/;"	m	struct:__anon7	file:
error_set	load.c	/^static void error_set(json_error_t *error, const lex_t *lex,$/;"	f	file:
flags	pack_unpack.c	/^    size_t flags;$/;"	m	struct:__anon7	file:
fmt	pack_unpack.c	/^    const char *fmt;$/;"	m	struct:__anon7	file:
from_locale	strconv.c	/^static void from_locale(char *buffer)$/;"	f	file:
get	load.c	/^    get_func get;$/;"	m	struct:__anon1	file:
get_func	load.c	/^typedef int (*get_func)(void *data);$/;"	t	file:
hash_str	hashtable.c	/^static size_t hash_str(const void *ptr)$/;"	f	file:
hashtable_clear	hashtable.c	/^void hashtable_clear(hashtable_t *hashtable)$/;"	f
hashtable_close	hashtable.c	/^void hashtable_close(hashtable_t *hashtable)$/;"	f
hashtable_del	hashtable.c	/^int hashtable_del(hashtable_t *hashtable, const char *key)$/;"	f
hashtable_do_clear	hashtable.c	/^static void hashtable_do_clear(hashtable_t *hashtable)$/;"	f	file:
hashtable_do_del	hashtable.c	/^static int hashtable_do_del(hashtable_t *hashtable,$/;"	f	file:
hashtable_do_rehash	hashtable.c	/^static int hashtable_do_rehash(hashtable_t *hashtable)$/;"	f	file:
hashtable_find_pair	hashtable.c	/^static pair_t *hashtable_find_pair(hashtable_t *hashtable, bucket_t *bucket,$/;"	f	file:
hashtable_get	hashtable.c	/^void *hashtable_get(hashtable_t *hashtable, const char *key)$/;"	f
hashtable_init	hashtable.c	/^int hashtable_init(hashtable_t *hashtable)$/;"	f
hashtable_iter	hashtable.c	/^void *hashtable_iter(hashtable_t *hashtable)$/;"	f
hashtable_iter_at	hashtable.c	/^void *hashtable_iter_at(hashtable_t *hashtable, const char *key)$/;"	f
hashtable_iter_key	hashtable.c	/^void *hashtable_iter_key(void *iter)$/;"	f
hashtable_iter_next	hashtable.c	/^void *hashtable_iter_next(hashtable_t *hashtable, void *iter)$/;"	f
hashtable_iter_serial	hashtable.c	/^size_t hashtable_iter_serial(void *iter)$/;"	f
hashtable_iter_set	hashtable.c	/^void hashtable_iter_set(void *iter, json_t *value)$/;"	f
hashtable_iter_value	hashtable.c	/^void *hashtable_iter_value(void *iter)$/;"	f
hashtable_set	hashtable.c	/^int hashtable_set(hashtable_t *hashtable,$/;"	f
insert_to_bucket	hashtable.c	/^static void insert_to_bucket(hashtable_t *hashtable, bucket_t *bucket,$/;"	f	file:
integer	load.c	/^        json_int_t integer;$/;"	m	union:__anon2::__anon3	file:
isinf	value.c	/^static JSON_INLINE int isinf(double x) { return !isnan(x) && isnan(x - x); }$/;"	f	file:
isnan	value.c	/^static JSON_INLINE int isnan(double x) { return x != x; }$/;"	f	file:
json_array	value.c	/^json_t *json_array(void)$/;"	f
json_array_append_new	value.c	/^int json_array_append_new(json_t *json, json_t *value)$/;"	f
json_array_clear	value.c	/^int json_array_clear(json_t *json)$/;"	f
json_array_copy	value.c	/^static json_t *json_array_copy(json_t *array)$/;"	f	file:
json_array_deep_copy	value.c	/^static json_t *json_array_deep_copy(json_t *array)$/;"	f	file:
json_array_equal	value.c	/^static int json_array_equal(json_t *array1, json_t *array2)$/;"	f	file:
json_array_extend	value.c	/^int json_array_extend(json_t *json, json_t *other_json)$/;"	f
json_array_get	value.c	/^json_t *json_array_get(const json_t *json, size_t index)$/;"	f
json_array_grow	value.c	/^static json_t **json_array_grow(json_array_t *array,$/;"	f	file:
json_array_insert_new	value.c	/^int json_array_insert_new(json_t *json, size_t index, json_t *value)$/;"	f
json_array_remove	value.c	/^int json_array_remove(json_t *json, size_t index)$/;"	f
json_array_set_new	value.c	/^int json_array_set_new(json_t *json, size_t index, json_t *value)$/;"	f
json_array_size	value.c	/^size_t json_array_size(const json_t *json)$/;"	f
json_copy	value.c	/^json_t *json_copy(json_t *json)$/;"	f
json_deep_copy	value.c	/^json_t *json_deep_copy(json_t *json)$/;"	f
json_delete	value.c	/^void json_delete(json_t *json)$/;"	f
json_delete_array	value.c	/^static void json_delete_array(json_array_t *array)$/;"	f	file:
json_delete_integer	value.c	/^static void json_delete_integer(json_integer_t *integer)$/;"	f	file:
json_delete_object	value.c	/^static void json_delete_object(json_object_t *object)$/;"	f	file:
json_delete_real	value.c	/^static void json_delete_real(json_real_t *real)$/;"	f	file:
json_delete_string	value.c	/^static void json_delete_string(json_string_t *string)$/;"	f	file:
json_dump_callback	dump.c	/^int json_dump_callback(const json_t *json, json_dump_callback_t callback, void *data, size_t flags)$/;"	f
json_dump_file	dump.c	/^int json_dump_file(const json_t *json, const char *path, size_t flags)$/;"	f
json_dumpf	dump.c	/^int json_dumpf(const json_t *json, FILE *output, size_t flags)$/;"	f
json_dumps	dump.c	/^char *json_dumps(const json_t *json, size_t flags)$/;"	f
json_equal	value.c	/^int json_equal(json_t *json1, json_t *json2)$/;"	f
json_false	value.c	/^json_t *json_false(void)$/;"	f
json_init	value.c	/^static JSON_INLINE void json_init(json_t *json, json_type type)$/;"	f	file:
json_integer	value.c	/^json_t *json_integer(json_int_t value)$/;"	f
json_integer_copy	value.c	/^static json_t *json_integer_copy(json_t *integer)$/;"	f	file:
json_integer_equal	value.c	/^static int json_integer_equal(json_t *integer1, json_t *integer2)$/;"	f	file:
json_integer_set	value.c	/^int json_integer_set(json_t *json, json_int_t value)$/;"	f
json_integer_value	value.c	/^json_int_t json_integer_value(const json_t *json)$/;"	f
json_load_callback	load.c	/^json_t *json_load_callback(json_load_callback_t callback, void *arg, size_t flags, json_error_t *error)$/;"	f
json_load_file	load.c	/^json_t *json_load_file(const char *path, size_t flags, json_error_t *error)$/;"	f
json_loadb	load.c	/^json_t *json_loadb(const char *buffer, size_t buflen, size_t flags, json_error_t *error)$/;"	f
json_loadf	load.c	/^json_t *json_loadf(FILE *input, size_t flags, json_error_t *error)$/;"	f
json_loads	load.c	/^json_t *json_loads(const char *string, size_t flags, json_error_t *error)$/;"	f
json_null	value.c	/^json_t *json_null(void)$/;"	f
json_number_value	value.c	/^double json_number_value(const json_t *json)$/;"	f
json_object	value.c	/^json_t *json_object(void)$/;"	f
json_object_clear	value.c	/^int json_object_clear(json_t *json)$/;"	f
json_object_copy	value.c	/^static json_t *json_object_copy(json_t *object)$/;"	f	file:
json_object_deep_copy	value.c	/^static json_t *json_object_deep_copy(json_t *object)$/;"	f	file:
json_object_del	value.c	/^int json_object_del(json_t *json, const char *key)$/;"	f
json_object_equal	value.c	/^static int json_object_equal(json_t *object1, json_t *object2)$/;"	f	file:
json_object_get	value.c	/^json_t *json_object_get(const json_t *json, const char *key)$/;"	f
json_object_iter	value.c	/^void *json_object_iter(json_t *json)$/;"	f
json_object_iter_at	value.c	/^void *json_object_iter_at(json_t *json, const char *key)$/;"	f
json_object_iter_key	value.c	/^const char *json_object_iter_key(void *iter)$/;"	f
json_object_iter_next	value.c	/^void *json_object_iter_next(json_t *json, void *iter)$/;"	f
json_object_iter_set_new	value.c	/^int json_object_iter_set_new(json_t *json, void *iter, json_t *value)$/;"	f
json_object_iter_value	value.c	/^json_t *json_object_iter_value(void *iter)$/;"	f
json_object_key_to_iter	value.c	/^void *json_object_key_to_iter(const char *key)$/;"	f
json_object_set_new	value.c	/^int json_object_set_new(json_t *json, const char *key, json_t *value)$/;"	f
json_object_set_new_nocheck	value.c	/^int json_object_set_new_nocheck(json_t *json, const char *key, json_t *value)$/;"	f
json_object_size	value.c	/^size_t json_object_size(const json_t *json)$/;"	f
json_object_update	value.c	/^int json_object_update(json_t *object, json_t *other)$/;"	f
json_object_update_existing	value.c	/^int json_object_update_existing(json_t *object, json_t *other)$/;"	f
json_object_update_missing	value.c	/^int json_object_update_missing(json_t *object, json_t *other)$/;"	f
json_pack	pack_unpack.c	/^json_t *json_pack(const char *fmt, ...)$/;"	f
json_pack_ex	pack_unpack.c	/^json_t *json_pack_ex(json_error_t *error, size_t flags, const char *fmt, ...)$/;"	f
json_real	value.c	/^json_t *json_real(double value)$/;"	f
json_real_copy	value.c	/^static json_t *json_real_copy(json_t *real)$/;"	f	file:
json_real_equal	value.c	/^static int json_real_equal(json_t *real1, json_t *real2)$/;"	f	file:
json_real_set	value.c	/^int json_real_set(json_t *json, double value)$/;"	f
json_real_value	value.c	/^double json_real_value(const json_t *json)$/;"	f
json_set_alloc_funcs	memory.c	/^void json_set_alloc_funcs(json_malloc_t malloc_fn, json_free_t free_fn)$/;"	f
json_string	value.c	/^json_t *json_string(const char *value)$/;"	f
json_string_copy	value.c	/^static json_t *json_string_copy(json_t *string)$/;"	f	file:
json_string_equal	value.c	/^static int json_string_equal(json_t *string1, json_t *string2)$/;"	f	file:
json_string_nocheck	value.c	/^json_t *json_string_nocheck(const char *value)$/;"	f
json_string_set	value.c	/^int json_string_set(json_t *json, const char *value)$/;"	f
json_string_set_nocheck	value.c	/^int json_string_set_nocheck(json_t *json, const char *value)$/;"	f
json_string_value	value.c	/^const char *json_string_value(const json_t *json)$/;"	f
json_strtoint	load.c	451;"	d	file:
json_strtoint	load.c	453;"	d	file:
json_strtoint	load.c	456;"	d	file:
json_true	value.c	/^json_t *json_true(void)$/;"	f
json_unpack	pack_unpack.c	/^int json_unpack(json_t *root, const char *fmt, ...)$/;"	f
json_unpack_ex	pack_unpack.c	/^int json_unpack_ex(json_t *root, json_error_t *error, size_t flags, const char *fmt, ...)$/;"	f
json_vpack_ex	pack_unpack.c	/^json_t *json_vpack_ex(json_error_t *error, size_t flags,$/;"	f
json_vunpack_ex	pack_unpack.c	/^int json_vunpack_ex(json_t *root, json_error_t *error, size_t flags,$/;"	f
jsonp_dtostr	strconv.c	/^int jsonp_dtostr(char *buffer, size_t size, double value)$/;"	f
jsonp_error_init	error.c	/^void jsonp_error_init(json_error_t *error, const char *source)$/;"	f
jsonp_error_set	error.c	/^void jsonp_error_set(json_error_t *error, int line, int column,$/;"	f
jsonp_error_set_source	error.c	/^void jsonp_error_set_source(json_error_t *error, const char *source)$/;"	f
jsonp_error_vset	error.c	/^void jsonp_error_vset(json_error_t *error, int line, int column,$/;"	f
jsonp_free	memory.c	/^void jsonp_free(void *ptr)$/;"	f
jsonp_malloc	memory.c	/^void *jsonp_malloc(size_t size)$/;"	f
jsonp_strdup	memory.c	/^char *jsonp_strdup(const char *str)$/;"	f
jsonp_strtod	strconv.c	/^int jsonp_strtod(strbuffer_t *strbuffer, double *out)$/;"	f
key	dump.c	/^    const char *key;$/;"	m	struct:object_key	file:
l_isalpha	load.c	37;"	d	file:
l_isdigit	load.c	38;"	d	file:
l_islower	load.c	36;"	d	file:
l_isupper	load.c	35;"	d	file:
l_isxdigit	load.c	39;"	d	file:
last_column	load.c	/^    int column, last_column;$/;"	m	struct:__anon1	file:
len	load.c	/^    size_t len;$/;"	m	struct:__anon5	file:
len	load.c	/^    size_t len;$/;"	m	struct:__anon6	file:
lex_close	load.c	/^static void lex_close(lex_t *lex)$/;"	f	file:
lex_get	load.c	/^static int lex_get(lex_t *lex, json_error_t *error)$/;"	f	file:
lex_get_save	load.c	/^static int lex_get_save(lex_t *lex, json_error_t *error)$/;"	f	file:
lex_init	load.c	/^static int lex_init(lex_t *lex, get_func get, void *data)$/;"	f	file:
lex_save	load.c	/^static void lex_save(lex_t *lex, int c)$/;"	f	file:
lex_save_cached	load.c	/^static void lex_save_cached(lex_t *lex)$/;"	f	file:
lex_scan	load.c	/^static int lex_scan(lex_t *lex, json_error_t *error)$/;"	f	file:
lex_scan_number	load.c	/^static int lex_scan_number(lex_t *lex, int c, json_error_t *error)$/;"	f	file:
lex_scan_string	load.c	/^static void lex_scan_string(lex_t *lex, json_error_t *error)$/;"	f	file:
lex_steal_string	load.c	/^static char *lex_steal_string(lex_t *lex)$/;"	f	file:
lex_t	load.c	/^} lex_t;$/;"	t	typeref:struct:__anon2	file:
lex_unget	load.c	/^static void lex_unget(lex_t *lex, int c)$/;"	f	file:
lex_unget_unsave	load.c	/^static void lex_unget_unsave(lex_t *lex, int c)$/;"	f	file:
line	load.c	/^    int line;$/;"	m	struct:__anon1	file:
line	pack_unpack.c	/^    int line;$/;"	m	struct:__anon7	file:
list_init	hashtable.c	/^static JSON_INLINE void list_init(list_t *list)$/;"	f	file:
list_insert	hashtable.c	/^static JSON_INLINE void list_insert(list_t *list, list_t *node)$/;"	f	file:
list_remove	hashtable.c	/^static JSON_INLINE void list_remove(list_t *list)$/;"	f	file:
list_t	hashtable.c	/^typedef struct hashtable_list list_t;$/;"	t	typeref:struct:hashtable_list	file:
list_to_pair	hashtable.c	18;"	d	file:
next_token	pack_unpack.c	/^static void next_token(scanner_t *s)$/;"	f	file:
num_buckets	hashtable.c	/^static JSON_INLINE size_t num_buckets(hashtable_t *hashtable)$/;"	f	file:
object_key	dump.c	/^struct object_key {$/;"	s	file:
object_key_compare_keys	dump.c	/^static int object_key_compare_keys(const void *key1, const void *key2)$/;"	f	file:
object_key_compare_serials	dump.c	/^static int object_key_compare_serials(const void *key1, const void *key2)$/;"	f	file:
pack	pack_unpack.c	/^static json_t *pack(scanner_t *s, va_list *ap)$/;"	f	file:
pack_array	pack_unpack.c	/^static json_t *pack_array(scanner_t *s, va_list *ap)$/;"	f	file:
pack_object	pack_unpack.c	/^static json_t *pack_object(scanner_t *s, va_list *ap)$/;"	f	file:
pair_t	hashtable.c	/^typedef struct hashtable_pair pair_t;$/;"	t	typeref:struct:hashtable_pair	file:
parse_array	load.c	/^static json_t *parse_array(lex_t *lex, size_t flags, json_error_t *error)$/;"	f	file:
parse_json	load.c	/^static json_t *parse_json(lex_t *lex, size_t flags, json_error_t *error)$/;"	f	file:
parse_object	load.c	/^static json_t *parse_object(lex_t *lex, size_t flags, json_error_t *error)$/;"	f	file:
parse_value	load.c	/^static json_t *parse_value(lex_t *lex, size_t flags, json_error_t *error)$/;"	f	file:
pos	load.c	/^    int pos;$/;"	m	struct:__anon4	file:
pos	load.c	/^    size_t pos;$/;"	m	struct:__anon5	file:
pos	load.c	/^    size_t pos;$/;"	m	struct:__anon6	file:
position	load.c	/^    size_t position;$/;"	m	struct:__anon1	file:
primes	hashtable.c	/^static const size_t primes[] = {$/;"	v	file:
real	load.c	/^        double real;$/;"	m	union:__anon2::__anon3	file:
saved_text	load.c	/^    strbuffer_t saved_text;$/;"	m	struct:__anon2	file:
scanner_init	pack_unpack.c	/^static void scanner_init(scanner_t *s, json_error_t *error,$/;"	f	file:
scanner_t	pack_unpack.c	/^} scanner_t;$/;"	t	typeref:struct:__anon7	file:
serial	dump.c	/^    size_t serial;$/;"	m	struct:object_key	file:
set_error	pack_unpack.c	/^static void set_error(scanner_t *s, const char *source, const char *fmt, ...)$/;"	f	file:
start	pack_unpack.c	/^    const char *start;$/;"	m	struct:__anon7	file:
state	load.c	/^    int state;$/;"	m	struct:__anon1	file:
strbuffer_append	strbuffer.c	/^int strbuffer_append(strbuffer_t *strbuff, const char *string)$/;"	f
strbuffer_append_byte	strbuffer.c	/^int strbuffer_append_byte(strbuffer_t *strbuff, char byte)$/;"	f
strbuffer_append_bytes	strbuffer.c	/^int strbuffer_append_bytes(strbuffer_t *strbuff, const char *data, size_t size)$/;"	f
strbuffer_clear	strbuffer.c	/^void strbuffer_clear(strbuffer_t *strbuff)$/;"	f
strbuffer_close	strbuffer.c	/^void strbuffer_close(strbuffer_t *strbuff)$/;"	f
strbuffer_init	strbuffer.c	/^int strbuffer_init(strbuffer_t *strbuff)$/;"	f
strbuffer_pop	strbuffer.c	/^char strbuffer_pop(strbuffer_t *strbuff)$/;"	f
strbuffer_steal_value	strbuffer.c	/^char *strbuffer_steal_value(strbuffer_t *strbuff)$/;"	f
strbuffer_value	strbuffer.c	/^const char *strbuffer_value(const strbuffer_t *strbuff)$/;"	f
stream	load.c	/^    stream_t stream;$/;"	m	struct:__anon2	file:
stream_get	load.c	/^static int stream_get(stream_t *stream, json_error_t *error)$/;"	f	file:
stream_init	load.c	/^stream_init(stream_t *stream, get_func get, void *data)$/;"	f	file:
stream_t	load.c	/^} stream_t;$/;"	t	typeref:struct:__anon1	file:
stream_to_lex	load.c	69;"	d	file:
stream_unget	load.c	/^static void stream_unget(stream_t *stream, int c)$/;"	f	file:
string	load.c	/^        char *string;$/;"	m	union:__anon2::__anon3	file:
string_data_t	load.c	/^} string_data_t;$/;"	t	typeref:struct:__anon4	file:
string_get	load.c	/^static int string_get(void *data)$/;"	f	file:
to_locale	strconv.c	/^static void to_locale(strbuffer_t *strbuffer)$/;"	f	file:
token	load.c	/^    int token;$/;"	m	struct:__anon2	file:
token	pack_unpack.c	/^    char token;$/;"	m	struct:__anon7	file:
type_name	pack_unpack.c	35;"	d	file:
type_names	pack_unpack.c	/^static const char * const type_names[] = {$/;"	v	file:
unpack	pack_unpack.c	/^static int unpack(scanner_t *s, json_t *root, va_list *ap)$/;"	f	file:
unpack_array	pack_unpack.c	/^static int unpack_array(scanner_t *s, json_t *root, va_list *ap)$/;"	f	file:
unpack_object	pack_unpack.c	/^static int unpack_object(scanner_t *s, json_t *root, va_list *ap)$/;"	f	file:
unpack_value_starters	pack_unpack.c	/^static const char unpack_value_starters[] = "{[siIbfFOon";$/;"	v	file:
utf8_check_first	utf.c	/^int utf8_check_first(char byte)$/;"	f
utf8_check_full	utf.c	/^int utf8_check_full(const char *buffer, int size, int32_t *codepoint)$/;"	f
utf8_check_string	utf.c	/^int utf8_check_string(const char *string, int length)$/;"	f
utf8_encode	utf.c	/^int utf8_encode(int32_t codepoint, char *buffer, int *size)$/;"	f
utf8_iterate	utf.c	/^const char *utf8_iterate(const char *buffer, int32_t *codepoint)$/;"	f
value	load.c	/^    } value;$/;"	m	struct:__anon2	typeref:union:__anon2::__anon3	file:
whitespace	dump.c	/^static const char whitespace[] = "                                ";$/;"	v	file:
