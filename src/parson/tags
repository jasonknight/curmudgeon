!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_MAX_CAPACITY	parson.c	36;"	d	file:
ERROR	parson.c	33;"	d	file:
JSONArray	parson.h	/^    JSONArray   = 5,$/;"	e	enum:parson_value_type
JSONBoolean	parson.h	/^    JSONBoolean = 6$/;"	e	enum:parson_value_type
JSONError	parson.h	/^    JSONError   = 0,$/;"	e	enum:parson_value_type
JSONNull	parson.h	/^    JSONNull    = 1,$/;"	e	enum:parson_value_type
JSONNumber	parson.h	/^    JSONNumber  = 3,$/;"	e	enum:parson_value_type
JSONObject	parson.h	/^    JSONObject  = 4,$/;"	e	enum:parson_value_type
JSONString	parson.h	/^    JSONString  = 2,$/;"	e	enum:parson_value_type
MAX	parson.c	42;"	d	file:
MAX_NESTING	parson.c	38;"	d	file:
OBJECT_MAX_CAPACITY	parson.c	37;"	d	file:
PARSON_Array	parson.h	/^typedef struct parson_array_t  PARSON_Array;$/;"	t	typeref:struct:parson_array_t
PARSON_Object	parson.h	/^typedef struct parson_object_t PARSON_Object;$/;"	t	typeref:struct:parson_object_t
PARSON_Value	parson.h	/^typedef struct parson_value_t  PARSON_Value;$/;"	t	typeref:struct:parson_value_t
PARSON_Value_Type	parson.h	/^} PARSON_Value_Type;$/;"	t	typeref:enum:parson_value_type
PARSON_Value_Value	parson.c	/^} PARSON_Value_Value;$/;"	t	typeref:union:parson_value_value	file:
STARTING_CAPACITY	parson.c	35;"	d	file:
SUCCESS	parson.c	34;"	d	file:
array	parson.c	/^    PARSON_Array  *array;$/;"	m	union:parson_value_value	file:
boolean	parson.c	/^    int          boolean;$/;"	m	union:parson_value_value	file:
capacity	parson.c	/^    size_t       capacity;$/;"	m	struct:parson_array_t	file:
capacity	parson.c	/^    size_t       capacity;$/;"	m	struct:parson_object_t	file:
count	parson.c	/^    size_t       count;$/;"	m	struct:parson_array_t	file:
count	parson.c	/^    size_t       count;$/;"	m	struct:parson_object_t	file:
is_decimal	parson.c	/^static int is_decimal(char *string, size_t length) {$/;"	f	file:
is_utf	parson.c	/^static int is_utf(unsigned char *s) {$/;"	f	file:
items	parson.c	/^    PARSON_Value **items;$/;"	m	struct:parson_array_t	file:
names	parson.c	/^    char **names;$/;"	m	struct:parson_object_t	file:
null	parson.c	/^    int          null;$/;"	m	union:parson_value_value	file:
number	parson.c	/^    double       number;$/;"	m	union:parson_value_value	file:
object	parson.c	/^    PARSON_Object *object;$/;"	m	union:parson_value_value	file:
parse_array_value	parson.c	/^PARSON_Value * parse_array_value(char **string, size_t nesting) {$/;"	f
parse_boolean_value	parson.c	/^PARSON_Value * parse_boolean_value(char **string) {$/;"	f
parse_null_value	parson.c	/^PARSON_Value * parse_null_value(char **string) {$/;"	f
parse_number_value	parson.c	/^PARSON_Value * parse_number_value(char **string) {$/;"	f
parse_object_value	parson.c	/^PARSON_Value * parse_object_value(char **string, size_t nesting) {$/;"	f
parse_string_value	parson.c	/^PARSON_Value * parse_string_value(char **string) {$/;"	f
parse_value	parson.c	/^PARSON_Value * parse_value(char **string, size_t nesting) {$/;"	f
parson_array_add	parson.c	/^int parson_array_add(PARSON_Array *array, PARSON_Value *value) {$/;"	f
parson_array_free	parson.c	/^void parson_array_free(PARSON_Array *array) {$/;"	f
parson_array_get_array	parson.c	/^PARSON_Array * parson_array_get_array(PARSON_Array *array, size_t index) {$/;"	f
parson_array_get_boolean	parson.c	/^int parson_array_get_boolean(PARSON_Array *array, size_t index) {$/;"	f
parson_array_get_count	parson.c	/^size_t parson_array_get_count(PARSON_Array *array) {$/;"	f
parson_array_get_number	parson.c	/^double parson_array_get_number(PARSON_Array *array, size_t index) {$/;"	f
parson_array_get_object	parson.c	/^PARSON_Object * parson_array_get_object(PARSON_Array *array, size_t index)$/;"	f
parson_array_get_string	parson.c	/^char * parson_array_get_string(PARSON_Array *array, size_t index) {$/;"	f
parson_array_get_value	parson.c	/^PARSON_Value * parson_array_get_value(PARSON_Array *array, size_t index) {$/;"	f
parson_array_init	parson.c	/^PARSON_Array * parson_array_init(void) {$/;"	f
parson_array_resize	parson.c	/^int parson_array_resize(PARSON_Array *array, size_t capacity) {$/;"	f
parson_array_t	parson.c	/^struct parson_array_t {$/;"	s	file:
parson_free	parson.c	45;"	d	file:
parson_get_processed_string	parson.c	/^char * parson_get_processed_string(char **string) {$/;"	f
parson_malloc	parson.c	44;"	d	file:
parson_object_add	parson.c	/^int parson_object_add(PARSON_Object *object, char *name, PARSON_Value$/;"	f
parson_object_dotget_array	parson.c	/^PARSON_Array * parson_object_dotget_array(PARSON_Object *object, char *name) {$/;"	f
parson_object_dotget_boolean	parson.c	/^int parson_object_dotget_boolean(PARSON_Object *object, char *name)$/;"	f
parson_object_dotget_number	parson.c	/^double parson_object_dotget_number(PARSON_Object *object, char *name) {$/;"	f
parson_object_dotget_object	parson.c	/^PARSON_Object * parson_object_dotget_object(PARSON_Object *object, char *name) {$/;"	f
parson_object_dotget_string	parson.c	/^char * parson_object_dotget_string(PARSON_Object *object, char *name) {$/;"	f
parson_object_dotget_value	parson.c	/^PARSON_Value * parson_object_dotget_value(PARSON_Object *object, char *name) {$/;"	f
parson_object_free	parson.c	/^void parson_object_free(PARSON_Object *object) {$/;"	f
parson_object_get_array	parson.c	/^PARSON_Array * parson_object_get_array(PARSON_Object *object, char *name) {$/;"	f
parson_object_get_boolean	parson.c	/^int parson_object_get_boolean(PARSON_Object *object, char *name) {$/;"	f
parson_object_get_count	parson.c	/^size_t parson_object_get_count(PARSON_Object *object) {$/;"	f
parson_object_get_name	parson.c	/^char * parson_object_get_name(PARSON_Object *object, size_t index) {$/;"	f
parson_object_get_number	parson.c	/^double parson_object_get_number(PARSON_Object *object, char *name) {$/;"	f
parson_object_get_object	parson.c	/^PARSON_Object * parson_object_get_object(PARSON_Object *object, char *name) {$/;"	f
parson_object_get_string	parson.c	/^char * parson_object_get_string(PARSON_Object *object, char *name) {$/;"	f
parson_object_get_value	parson.c	/^PARSON_Value * parson_object_get_value(PARSON_Object *object, char *name) {$/;"	f
parson_object_init	parson.c	/^PARSON_Object * parson_object_init(void) {$/;"	f
parson_object_nget_value	parson.c	/^PARSON_Value * parson_object_nget_value(PARSON_Object *object, char *name, size_t n) {$/;"	f
parson_object_resize	parson.c	/^int parson_object_resize(PARSON_Object *object, size_t capacity) {$/;"	f
parson_object_t	parson.c	/^struct parson_object_t {$/;"	s	file:
parson_parse_file	parson.c	/^PARSON_Value * parson_parse_file(char *filename) {$/;"	f
parson_parse_string	parson.c	/^PARSON_Value * parson_parse_string(char *string) {$/;"	f
parson_parson_h	parson.h	25;"	d
parson_realloc	parson.c	46;"	d	file:
parson_skip_quotes	parson.c	/^void parson_skip_quotes(char **string) {$/;"	f
parson_strndup	parson.c	/^static char * parson_strndup(char *string, size_t n) {$/;"	f	file:
parson_value_free	parson.c	/^void parson_value_free(PARSON_Value *value) {$/;"	f
parson_value_get_array	parson.c	/^PARSON_Array * parson_value_get_array(PARSON_Value *value) {$/;"	f
parson_value_get_boolean	parson.c	/^int parson_value_get_boolean(PARSON_Value *value) {$/;"	f
parson_value_get_number	parson.c	/^double parson_value_get_number(PARSON_Value *value) {$/;"	f
parson_value_get_object	parson.c	/^PARSON_Object * parson_value_get_object(PARSON_Value *value) {$/;"	f
parson_value_get_string	parson.c	/^char * parson_value_get_string(PARSON_Value *value) {$/;"	f
parson_value_get_type	parson.c	/^PARSON_Value_Type parson_value_get_type(PARSON_Value *value) {$/;"	f
parson_value_init_array	parson.c	/^PARSON_Value * parson_value_init_array(void) {$/;"	f
parson_value_init_boolean	parson.c	/^PARSON_Value * parson_value_init_boolean(int boolean) {$/;"	f
parson_value_init_null	parson.c	/^PARSON_Value * parson_value_init_null(void) {$/;"	f
parson_value_init_number	parson.c	/^PARSON_Value * parson_value_init_number(double number) {$/;"	f
parson_value_init_object	parson.c	/^PARSON_Value * parson_value_init_object(void) {$/;"	f
parson_value_init_string	parson.c	/^PARSON_Value * parson_value_init_string(char *string) {$/;"	f
parson_value_t	parson.c	/^struct parson_value_t {$/;"	s	file:
parson_value_type	parson.h	/^typedef enum parson_value_type {$/;"	g
parson_value_value	parson.c	/^typedef union parson_value_value {$/;"	u	file:
sizeof_token	parson.c	39;"	d	file:
skip_char	parson.c	40;"	d	file:
skip_whitespaces	parson.c	41;"	d	file:
string	parson.c	/^    char        *string; \/\/ we may want to change this.$/;"	m	union:parson_value_value	file:
try_realloc	parson.c	/^static int try_realloc(void **ptr, size_t new_size) {$/;"	f	file:
type	parson.c	/^    PARSON_Value_Type     type;$/;"	m	struct:parson_value_t	file:
value	parson.c	/^    PARSON_Value_Value    value;$/;"	m	struct:parson_value_t	file:
values	parson.c	/^    PARSON_Value **values;$/;"	m	struct:parson_object_t	file:
